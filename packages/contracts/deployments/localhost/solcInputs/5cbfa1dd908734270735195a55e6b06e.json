{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/TransparentUpgradeableAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { IProxyAdapter } from \"../IProxyAdapter.sol\";\nimport {\n    TransparentUpgradeableProxy\n} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\n/**\n * @title TransparentUpgradeableAdapter\n * @notice Adapter for an OpenZeppelin Transparent Upgradeable proxy. This is the adapter used by\n *         default proxies in the ChugSplash system. To learn more about the transparent proxy\n *         pattern, see: https://docs.openzeppelin.com/contracts/4.x/api/proxy#transparent_proxy\n */\ncontract TransparentUpgradeableAdapter is IProxyAdapter {\n    /**\n     * @inheritdoc IProxyAdapter\n     */\n    function getProxyImplementation(address payable _proxy) external returns (address) {\n        return TransparentUpgradeableProxy(_proxy).implementation();\n    }\n\n    /**\n     * @inheritdoc IProxyAdapter\n     */\n    function upgradeProxyTo(address payable _proxy, address _implementation) external {\n        TransparentUpgradeableProxy(_proxy).upgradeTo(_implementation);\n    }\n\n    /**\n     * @inheritdoc IProxyAdapter\n     */\n    function changeProxyAdmin(address payable _proxy, address _newAdmin) external {\n        TransparentUpgradeableProxy(_proxy).changeAdmin(_newAdmin);\n    }\n}\n"
    },
    "contracts/IProxyAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @title IProxyAdapter\n * @notice Interface that must be inherited by each adapter.\n */\ninterface IProxyAdapter {\n    /**\n     * @notice Returns the current implementation of the proxy.\n     *\n     * @param _proxy Address of the proxy.\n     */\n    function getProxyImplementation(address payable _proxy) external returns (address);\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * @param _proxy          Address of the proxy.\n     * @param _implementation Address of the new implementation.\n     */\n    function upgradeProxyTo(address payable _proxy, address _implementation) external;\n\n    /**\n     * @notice Changes the admin of the proxy.\n     *\n     * @param _proxy    Address of the proxy.\n     * @param _newAdmin Address of the new admin.\n     */\n    function changeProxyAdmin(address payable _proxy, address _newAdmin) external;\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/ChugSplashManagerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {\n    TransparentUpgradeableProxy\n} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport { ChugSplashRegistry } from \"./ChugSplashRegistry.sol\";\n\n/**\n * @title ChugSplashManagerProxy\n */\ncontract ChugSplashManagerProxy is TransparentUpgradeableProxy {\n    /**\n     * @notice Address of the ChugSplashRegistry.\n     */\n    ChugSplashRegistry public immutable registry;\n\n    /**\n     * @param _registry The ChugSplashRegistry's proxy.\n     * @param _logic    Address of the ChugSplashManager implementation contract.\n     * @param _admin    Owner of this contract.\n     * @param _data     Data to initialize this contract.\n     */\n    constructor(\n        ChugSplashRegistry _registry,\n        address _logic,\n        address _admin,\n        bytes memory _data\n    ) payable TransparentUpgradeableProxy(_logic, _admin, _data) {\n        registry = _registry;\n    }\n\n    /**\n     * @notice The implementation contract for this proxy is stored in the ChugSplashRegistry's\n     *         proxy.\n     */\n    function _implementation() internal view override returns (address) {\n        return registry.managerImplementation();\n    }\n}\n"
    },
    "contracts/ChugSplashRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ChugSplashManager } from \"./ChugSplashManager.sol\";\nimport { ChugSplashManagerProxy } from \"./ChugSplashManagerProxy.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { Proxy } from \"@eth-optimism/contracts-bedrock/contracts/universal/Proxy.sol\";\n\n/**\n * @title ChugSplashRegistry\n * @notice The ChugSplashRegistry is the root contract for the ChugSplash deployment system. All\n *         deployments must be first registered with this contract, which allows clients to easily\n *         find and index these deployments. Deployment names are unique and are reserved on a\n *         first-come, first-served basis.\n */\ncontract ChugSplashRegistry is Initializable {\n    /**\n     * @notice Emitted whenever a new project is registered.\n     *\n     * @param projectNameHash Hash of the project name. Without this parameter, we\n     *                        won't be able to recover the unhashed project name in\n     *                        events, since indexed dynamic types like strings are hashed.\n     *                        For further explanation:\n     *                        https://github.com/ethers-io/ethers.js/issues/243\n     * @param creator         Address of the creator of the project.\n     * @param manager         Address of the ChugSplashManager for this project.\n     * @param owner           Address of the initial owner of the project.\n     * @param projectName     Name of the project that was registered.\n     */\n    event ChugSplashProjectRegistered(\n        string indexed projectNameHash,\n        address indexed creator,\n        address indexed manager,\n        address owner,\n        string projectName\n    );\n\n    /**\n     * @notice Emitted whenever a ChugSplashManager contract wishes to announce an event on the\n     *         registry. We use this to avoid needing a complex indexing system when we're trying\n     *         to find events emitted by the various manager contracts.\n     *\n     * @param eventNameHash Hash of the name of the event being announced.\n     * @param manager       Address of the manager announcing an event.\n     * @param eventName     Name of the event being announced.\n     */\n    event EventAnnounced(string indexed eventNameHash, address indexed manager, string eventName);\n\n    /**\n     * @notice Emitted whenever a new proxy type is added.\n     *\n     * @param proxyType Hash representing the proxy type.\n     * @param adapter   Address of the adapter for the proxy.\n     */\n    event ProxyTypeAdded(bytes32 proxyType, address adapter);\n\n    /**\n     * @notice Mapping of project names to ChugSplashManager contracts.\n     */\n    mapping(string => ChugSplashManager) public projects;\n\n    /**\n     * @notice Mapping of created manager contracts.\n     */\n    mapping(ChugSplashManager => bool) public managers;\n\n    /**\n     * @notice Mapping of proxy types to adapters.\n     */\n    mapping(bytes32 => address) public adapters;\n\n    /**\n     * @notice Address of the ProxyUpdater.\n     */\n    address public immutable proxyUpdater;\n\n    /**\n     * @notice Amount that must be deposited in the ChugSplashManager in order to execute a bundle.\n     */\n    uint256 public immutable ownerBondAmount;\n\n    /**\n     * @notice Address of the ChugSplashManager implementation contract.\n     */\n    // TODO: Remove once this contract is not upgradeable anymore.\n    address public immutable managerImplementation;\n\n    /**\n     * @param _proxyUpdater          Address of the ProxyUpdater.\n     * @param _ownerBondAmount       Amount that must be deposited in the ChugSplashManager in order to\n     *                               execute a bundle.\n     * @param _managerImplementation Address of the ChugSplashManager implementation contract.\n     */\n    constructor(address _proxyUpdater, uint256 _ownerBondAmount, address _managerImplementation) {\n        proxyUpdater = _proxyUpdater;\n        ownerBondAmount = _ownerBondAmount;\n        managerImplementation = _managerImplementation;\n    }\n\n    /**\n     * @notice Registers a new project.\n     *\n     * @param _name               Name of the new ChugSplash project.\n     * @param _owner              Initial owner for the new project.\n     * @param _executorBondAmount Executor bond amount in ETH.\n     */\n    function register(\n        string memory _name,\n        address _owner,\n        uint256 _executorBondAmount\n    ) public {\n        require(\n            address(projects[_name]) == address(0),\n            \"ChugSplashRegistry: name already registered\"\n        );\n\n        // Deploy and initialize the ChugSplashManager using a proxy.\n        ChugSplashManagerProxy manager = new ChugSplashManagerProxy{ salt: bytes32(0) }(\n            this, // This will be the Registry's proxy address since the Registry will be\n            // delegatecalled by the proxy.\n            managerImplementation,\n            _owner,\n            abi.encodeCall(ChugSplashManager.initialize, (_name, _owner, _executorBondAmount))\n        );\n\n        projects[_name] = ChugSplashManager(payable(address(manager)));\n        managers[ChugSplashManager(payable(address(manager)))] = true;\n\n        emit ChugSplashProjectRegistered(_name, msg.sender, address(manager), _owner, _name);\n    }\n\n    /**\n     * @notice Allows ChugSplashManager contracts to announce events.\n     *\n     * @param _event Name of the event to announce.\n     */\n    function announce(string memory _event) public {\n        require(\n            managers[ChugSplashManager(payable(msg.sender))] == true,\n            \"ChugSplashRegistry: events can only be announced by ChugSplashManager contracts\"\n        );\n\n        emit EventAnnounced(_event, msg.sender, _event);\n    }\n\n    /**\n     * @notice Adds a new proxy type with a corresponding adapter, which can be used to upgrade a\n     *         custom proxy.\n     *\n     * @param _proxyType Hash representing the proxy type\n     * @param _adapter   Address of the adapter for this proxy type.\n     */\n    function addProxyType(bytes32 _proxyType, address _adapter) external {\n        require(\n            adapters[_proxyType] == address(0),\n            \"ChugSplashRegistry: proxy type has an existing adapter\"\n        );\n        // TODO: We might want to add a check here that the adapter supports the correct interface\n        // (e.g. using ERC165Checker) to avoid incorrectly inputted adapter addresses.\n        adapters[_proxyType] = _adapter;\n\n        emit ProxyTypeAdded(_proxyType, _adapter);\n    }\n}\n"
    },
    "contracts/ChugSplashManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { Proxy } from \"@eth-optimism/contracts-bedrock/contracts/universal/Proxy.sol\";\nimport { ChugSplashRegistry } from \"./ChugSplashRegistry.sol\";\nimport { IProxyAdapter } from \"./IProxyAdapter.sol\";\nimport { ProxyUpdater } from \"./ProxyUpdater.sol\";\nimport { Create2 } from \"./libraries/Create2.sol\";\nimport { MerkleTree } from \"./libraries/MerkleTree.sol\";\n\n/**\n * @title ChugSplashManager\n */\ncontract ChugSplashManager is OwnableUpgradeable {\n    /**\n     * @notice Enum representing possible ChugSplash action types.\n     */\n    enum ChugSplashActionType {\n        SET_CODE,\n        SET_STORAGE\n    }\n\n    /**\n     * @notice Enum representing the status of a given ChugSplash action.\n     */\n    enum ChugSplashBundleStatus {\n        EMPTY,\n        PROPOSED,\n        APPROVED,\n        COMPLETED,\n        CANCELLED\n    }\n\n    /**\n     * @notice Struct representing a ChugSplash action.\n     */\n    struct ChugSplashAction {\n        string target;\n        ChugSplashActionType actionType;\n        bytes data;\n    }\n\n    /**\n     * @notice Struct representing the state of a ChugSplash bundle.\n     */\n    struct ChugSplashBundleState {\n        ChugSplashBundleStatus status;\n        bool[] executions;\n        uint256 total;\n        uint256 timeClaimed;\n        address selectedExecutor;\n        bool executorBondReturned;\n    }\n\n    /**\n     * @notice Emitted when a ChugSplash bundle is proposed.\n     *\n     * @param bundleId   ID of the bundle being proposed.\n     * @param bundleRoot Root of the proposed bundle's merkle tree.\n     * @param bundleSize Number of steps in the proposed bundle.\n     * @param configUri  URI of the config file that can be used to re-generate the bundle.\n     */\n    event ChugSplashBundleProposed(\n        bytes32 indexed bundleId,\n        bytes32 bundleRoot,\n        uint256 bundleSize,\n        string configUri\n    );\n\n    /**\n     * @notice Emitted when a ChugSplash bundle is approved.\n     *\n     * @param bundleId ID of the bundle being approved.\n     */\n    event ChugSplashBundleApproved(bytes32 indexed bundleId);\n\n    /**\n     * @notice Emitted when a ChugSplash action is executed.\n     *\n     * @param bundleId    Unique ID for the bundle.\n     * @param executor    Address of the executor.\n     * @param actionIndex Index within the bundle hash of the action that was executed.\n     */\n    event ChugSplashActionExecuted(\n        bytes32 indexed bundleId,\n        address indexed executor,\n        uint256 actionIndex\n    );\n\n    /**\n     * @notice Emitted when a ChugSplash bundle is completed.\n     *\n     * @param bundleId Unique ID for the bundle.\n     * @param executor Address of the executor.\n     * @param total    Total number of completed actions.\n     */\n    event ChugSplashBundleCompleted(\n        bytes32 indexed bundleId,\n        address indexed executor,\n        uint256 total\n    );\n\n    /**\n     * @notice Emitted when an active ChugSplash bundle is cancelled.\n     *\n     * @param bundleId Bundle ID that was cancelled.\n     * @param owner    Owner of the ChugSplashManager.\n     * @param total    Total number of completed actions.\n     */\n    event ChugSplashBundleCancelled(bytes32 indexed bundleId, address indexed owner, uint256 total);\n\n    /**\n     * @notice Emitted when a non-standard proxy is assigned to a target.\n     *\n     * @param targetNameHash Hash of the target's string name.\n     * @param proxy          Address of the proxy.\n     * @param proxyType      The proxy type.\n     * @param targetName     String name of the target.\n     */\n    event ProxySetToTarget(\n        string indexed targetNameHash,\n        address indexed proxy,\n        bytes32 indexed proxyType,\n        string targetName\n    );\n\n    /**\n     * @notice Emitted when the project owner transfers ownership of a proxy away from the\n     *         ChugSplashManager.\n     *\n     * @param targetNameHash Hash of the target's string name.\n     * @param proxy          Address of the proxy that is the subject of the ownership transfer.\n     * @param proxyType      The proxy type.\n     * @param newOwner       Address of the project owner that is receiving ownership of the proxy.\n     * @param targetName     String name of the target.\n     */\n    event ProxyOwnershipTransferred(\n        string indexed targetNameHash,\n        address indexed proxy,\n        bytes32 indexed proxyType,\n        address newOwner,\n        string targetName\n    );\n\n    /**\n     * @notice Emitted when a bundle is claimed by an executor.\n     *\n     * @param bundleId ID of the bundle that was claimed.\n     * @param executor Address of the executor that claimed the bundle ID for the project.\n     */\n    event ChugSplashBundleClaimed(bytes32 indexed bundleId, address indexed executor);\n\n    /**\n     * @notice Emitted when an executor is refunded the bond that they originally posted to claim a\n     *         bundle.\n     *\n     * @param bundleId ID of the bundle that was claimed.\n     * @param executor Address of the executor that posted the bond.\n     */\n    event ExecutorBondReturned(bytes32 indexed bundleId, address indexed executor);\n\n    /**\n     * @notice Emitted when a new executor bond amount is set.\n     *\n     * @param executorBondAmount New executor bond amount.\n     */\n    event ExecutorBondAmountSet(uint256 executorBondAmount);\n\n    /**\n     * @notice Emitted when ETH is withdrawn from this contract.\n     *\n     * @param from   Address that initiated the withdrawal.\n     * @param to     Address that received the ETH.\n     * @param amount ETH amount withdrawn.\n     */\n    event ETHWithdrawn(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @notice Emitted when ETH is deposited in this contract\n     */\n    event ETHDeposited(address indexed from, uint256 indexed amount);\n\n    /**\n     * @notice \"Magic\" prefix. When prepended to some arbitrary bytecode and used to create a\n     *         contract, the appended bytecode will be deployed as given.\n     */\n    bytes13 internal constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;\n\n    /**\n     * @notice Address of the ChugSplashRegistry.\n     */\n    ChugSplashRegistry public immutable registry;\n\n    /**\n     * @notice Address of the ProxyUpdater.\n     */\n    address public immutable proxyUpdater;\n\n    /**\n     * @notice Amount that must be deposited in this contract in order to execute a bundle. The\n     *         project owner can withdraw this amount whenever a bundle is not active. This bond\n     *         will be forfeited if the project owner cancels a bundle that is in progress, which is\n     *         necessary to prevent owners from trolling executors by immediately cancelling and\n     *         withdrawing funds.\n     */\n    uint256 public immutable ownerBondAmount;\n\n    /**\n     * @notice Name of the project this contract is managing.\n     */\n    string public name;\n\n    /**\n     * @notice ID of the currently active bundle.\n     */\n    bytes32 public activeBundleId;\n\n    /**\n     * @notice Amount in ETH that the executor must send to this contract to claim a bundle for\n     *         `executionLockTime`.\n     */\n    uint256 public executorBondAmount;\n\n    /**\n     * @notice Amount of time for an executor to finish executing a bundle once they have claimed\n     *         it. If the executor fails to completely execute the bundle in this amount of time,\n     *         their bond is forfeited to the ChugSplashManager.\n     */\n    uint256 public immutable executionLockTime;\n\n    /**\n     * @notice Mapping of bundle IDs to bundle state.\n     */\n    mapping(bytes32 => ChugSplashBundleState) public bundles;\n\n    /**\n     * @notice Mapping of target names to proxy addresses. If a target is using the default\n     *         proxy, then its value in this mapping is the zero-address.\n     */\n    mapping(string => address payable) public proxies;\n\n    /**\n     * @notice Mapping of target names to proxy types. If a target is using the default proxy,\n     *         then its value in this mapping is bytes32(0).\n     */\n    mapping(string => bytes32) proxyTypes;\n\n    /**\n     * @param _registry           Address of the ChugSplashRegistry.\n     * @param _name               Name of the project this contract is managing.\n     * @param _owner              Initial owner of this contract.\n     * @param _proxyUpdater       Address of the ProxyUpdater.\n     * @param _executorBondAmount Executor bond amount in ETH.\n     * @param _executionLockTime  Amount of time for an executor to completely execute a bundle\n     *                            after claiming it.\n     * @param _ownerBondAmount    Amount that must be deposited in this contract in order to execute\n     *                            a bundle.\n     */\n    constructor(\n        ChugSplashRegistry _registry,\n        string memory _name,\n        address _owner,\n        address _proxyUpdater,\n        uint256 _executorBondAmount,\n        uint256 _executionLockTime,\n        uint256 _ownerBondAmount\n    ) {\n        registry = _registry;\n        proxyUpdater = _proxyUpdater;\n        executionLockTime = _executionLockTime;\n        ownerBondAmount = _ownerBondAmount;\n\n        initialize(_name, _owner, _executorBondAmount);\n    }\n\n    /**\n     * @param _name               Name of the project this contract is managing.\n     * @param _owner              Initial owner of this contract.\n     * @param _executorBondAmount Executor bond amount in ETH.\n     */\n    function initialize(string memory _name, address _owner, uint256 _executorBondAmount) public initializer {\n        name = _name;\n        executorBondAmount = _executorBondAmount;\n\n        __Ownable_init();\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Computes the bundle ID from the bundle parameters.\n     *\n     * @param _bundleRoot Root of the bundle's merkle tree.\n     * @param _bundleSize Number of elements in the bundle's tree.\n     * @param _configUri  URI pointing to the config file for the bundle.\n     *\n     * @return Unique ID for the bundle.\n     */\n    function computeBundleId(\n        bytes32 _bundleRoot,\n        uint256 _bundleSize,\n        string memory _configUri\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(_bundleRoot, _bundleSize, _configUri));\n    }\n\n    /**\n     * @notice Allows the owner to propose a new ChugSplash bundle to be executed.\n     *\n     * @param _bundleRoot Root of the bundle's merkle tree.\n     * @param _bundleSize Number of elements in the bundle's tree.\n     * @param _configUri  URI pointing to the config file for the bundle.\n     */\n    function proposeChugSplashBundle(\n        bytes32 _bundleRoot,\n        uint256 _bundleSize,\n        string memory _configUri\n    ) public onlyOwner {\n        bytes32 bundleId = computeBundleId(_bundleRoot, _bundleSize, _configUri);\n        ChugSplashBundleState storage bundle = bundles[bundleId];\n\n        require(\n            bundle.status == ChugSplashBundleStatus.EMPTY,\n            \"ChugSplashManager: bundle already exists\"\n        );\n\n        bundle.status = ChugSplashBundleStatus.PROPOSED;\n        bundle.executions = new bool[](_bundleSize);\n\n        emit ChugSplashBundleProposed(bundleId, _bundleRoot, _bundleSize, _configUri);\n        registry.announce(\"ChugSplashBundleProposed\");\n    }\n\n    /**\n     * @notice Allows the owner to approve a bundle to be executed. There must be at least\n     *         `ownerBondAmount` deposited in this contract in order for a bundle to be approved.\n     *         The owner can send the bond to this contract via a call to `depositETH` or `receive`.\n     *         This bond will be forfeited if the project owner cancels an approved bundle. Also\n     *         note that the bundle can be executed as soon as it is approved.\n     *\n     * @param _bundleId ID of the bundle to approve\n     */\n    function approveChugSplashBundle(bytes32 _bundleId) public onlyOwner {\n        require(\n            address(this).balance >= ownerBondAmount,\n            \"ChugSplashManager: insufficient balance in manager\"\n        );\n\n        ChugSplashBundleState storage bundle = bundles[_bundleId];\n\n        require(\n            bundle.status == ChugSplashBundleStatus.PROPOSED,\n            \"ChugSplashManager: bundle does not exist or has already been approved or completed\"\n        );\n\n        require(\n            activeBundleId == bytes32(0),\n            \"ChugSplashManager: another bundle has been approved and not yet completed\"\n        );\n\n        activeBundleId = _bundleId;\n        bundle.status = ChugSplashBundleStatus.APPROVED;\n\n        emit ChugSplashBundleApproved(_bundleId);\n        registry.announce(\"ChugSplashBundleApproved\");\n    }\n\n    /**\n     * @notice Executes a specific action within the current active bundle for a project. Actions\n     *         can only be executed once. If executing this action would complete the bundle, will\n     *         mark the bundle as completed and make it possible for a new bundle to be approved.\n     *\n     * @param _action      Action to execute.\n     * @param _actionIndex Index of the action in the bundle.\n     * @param _proof       Merkle proof of the action within the bundle.\n     */\n    function executeChugSplashBundleAction(\n        ChugSplashAction memory _action,\n        uint256 _actionIndex,\n        bytes32[] memory _proof\n    ) public {\n        require(\n            activeBundleId != bytes32(0),\n            \"ChugSplashManager: no bundle has been approved for execution\"\n        );\n\n        ChugSplashBundleState storage bundle = bundles[activeBundleId];\n\n        require(\n            bundle.status == ChugSplashBundleStatus.APPROVED,\n            \"ChugSplashManager: bundle is not approved\"\n        );\n\n        require(\n            bundle.executions[_actionIndex] == false,\n            \"ChugSplashManager: action has already been executed\"\n        );\n\n        address executor = getSelectedExecutor(activeBundleId);\n        require(\n            executor == msg.sender,\n            \"ChugSplashManager: caller is not approved executor for active bundle ID\"\n        );\n\n        require(\n            MerkleTree.verify(\n                activeBundleId,\n                keccak256(abi.encode(_action.target, _action.actionType, _action.data)),\n                _actionIndex,\n                _proof,\n                bundle.executions.length\n            ),\n            \"ChugSplashManager: invalid bundle action proof\"\n        );\n\n        // Get the proxy type for the proxy that is being used for this target.\n        bytes32 proxyType = proxyTypes[_action.target];\n\n        // Get the proxy to use for this target. The proxy can either be the default proxy used by\n        // ChugSplash or a non-standard proxy that has previously been set by the project owner.\n        address payable proxy;\n        if (proxyType == bytes32(0)) {\n            // Use a default proxy if this target has no proxy type assigned to it.\n\n            // Make sure the proxy has code in it and deploy the proxy if it doesn't. Since we're\n            // deploying via CREATE2, we can always correctly predict what the proxy address\n            // *should* be and can therefore easily check if it's already populated.\n            // TODO: See if there's a better way to handle this case because it messes with the gas\n            // cost of SET_CODE/SET_STORAGE operations in a somewhat unpredictable way.\n            proxy = getProxyByName(_action.target);\n            if (proxy.code.length == 0) {\n                bytes32 salt = keccak256(bytes(_action.target));\n                Proxy created = new Proxy{ salt: salt }(address(this));\n\n                // Could happen if insufficient gas is supplied to this transaction, should not\n                // happen otherwise. If there's a situation in which this could happen other than a\n                // standard OOG, then this would halt the entire contract.\n                // TODO: Make sure this cannot happen in any case other than OOG.\n                require(\n                    address(created) == proxy,\n                    \"ChugSplashManager: Proxy was not created correctly\"\n                );\n            }\n        } else {\n            // Use the non-standard proxy assigned to this target by the owner.\n            proxy = proxies[_action.target];\n        }\n\n        // Next, we execute the ChugSplash action by calling setCode/setStorage.\n        if (_action.actionType == ChugSplashActionType.SET_CODE) {\n            _setProxyCode(proxy, proxyType, _action.data);\n        } else {\n            (bytes32 key, bytes32 val) = abi.decode(_action.data, (bytes32, bytes32));\n            _setProxyStorage(proxy, proxyType, key, val);\n        }\n\n        // Mark the action as executed and update the total number of executed actions.\n        bundle.total++;\n        bundle.executions[_actionIndex] = true;\n\n        emit ChugSplashActionExecuted(activeBundleId, msg.sender, _actionIndex);\n        registry.announce(\"ChugSplashActionExecuted\");\n\n        // If all actions have been executed, then we can complete the bundle. Mark the bundle as\n        // completed and reset the active bundle hash so that a new bundle can be executed.\n        if (bundle.total == bundle.executions.length) {\n            bundle.status = ChugSplashBundleStatus.COMPLETED;\n            bytes32 completedBundleId = activeBundleId;\n            activeBundleId = bytes32(0);\n\n            emit ChugSplashBundleCompleted(completedBundleId, msg.sender, bundle.total);\n            registry.announce(\"ChugSplashBundleCompleted\");\n\n            // Refund the executor's bond\n            _returnExecutorBond(completedBundleId);\n        }\n    }\n\n    /**\n     * @notice **WARNING**: Cancellation is a potentially dangerous action and should not be\n     *         executed unless in an emergency.\n     *\n     *         Cancels an active ChugSplash bundle. This causes the project owner to forfeit their\n     *         bond to the executor, and also refunds the executor's bond.\n     */\n    function cancelActiveChugSplashBundle() public onlyOwner {\n        require(activeBundleId != bytes32(0), \"ChugSplashManager: no bundle is currently active\");\n\n        ChugSplashBundleState storage bundle = bundles[activeBundleId];\n\n        bytes32 cancelledBundleId = activeBundleId;\n        activeBundleId = bytes32(0);\n        bundle.status = ChugSplashBundleStatus.CANCELLED;\n\n        emit ChugSplashBundleCancelled(cancelledBundleId, msg.sender, bundle.total);\n        registry.announce(\"ChugSplashBundleCancelled\");\n\n        _returnExecutorBond(cancelledBundleId);\n\n        // Send the project owner's bond to the executor\n        address executor = getSelectedExecutor(activeBundleId);\n        (bool success, ) = payable(executor).call{ value: ownerBondAmount }(new bytes(0));\n        require(success, \"ChugSplashManager: failed to send owner's bond to the executor\");\n    }\n\n    /**\n     * @notice Allows an executor to post a bond of `executorBondAmount` to claim the sole right to\n     *         execute actions for a bundle over a period of `executionLockTime`. Only the first\n     *         executor to post a bond gains this right. Executors must finish executing the bundle\n     *         within `executionLockTime` or else their bond is forfeited to this contract and\n     *         another executor may claim the bundle. Note that this strategy creates a PGA for the\n     *         transaction to claim the bundle but removes PGAs during the execution process.\n     *\n     * @param _bundleId ID of the bundle being claimed.\n     */\n    function claim(bytes32 _bundleId) external payable {\n        require(\n            executorBondAmount == msg.value,\n            \"ChugSplashManager: incorrect executor bond amount\"\n        );\n        ChugSplashBundleStatus status = bundles[_bundleId].status;\n        require(\n            status == ChugSplashBundleStatus.APPROVED,\n            \"ChugSplashManager: bundle is not active\"\n        );\n\n        ChugSplashBundleState storage bundle = bundles[_bundleId];\n\n        require(\n            block.timestamp > bundle.timeClaimed + executionLockTime,\n            \"ChugSplashManager: bundle already claimed by an executor\"\n        );\n\n        bundle.timeClaimed = block.timestamp;\n        bundle.selectedExecutor = msg.sender;\n\n        emit ChugSplashBundleClaimed(_bundleId, msg.sender);\n        registry.announce(\"ChugSplashBundleClaimed\");\n    }\n\n    /**\n     * @notice Assigns a non-standard proxy to the specified target to replace the default proxy\n     *         used by ChugSplash. This allows project owners to plug their existing proxies into\n     *         ChugSplash in a fully opt-in manner. Only callable by this contract's owner.\n     *\n     * @param _name      String name of the target.\n     * @param _proxy     Address of the non-standard proxy.\n     * @param _proxyType The proxy's type.\n     */\n    function setProxyToTarget(\n        string memory _name,\n        address payable _proxy,\n        bytes32 _proxyType\n    ) external onlyOwner {\n        require(\n            activeBundleId == bytes32(0),\n            \"ChugSplashManager: cannot change proxy while bundle is active\"\n        );\n        require(_proxy != address(0), \"ChugSplashManager: proxy cannot be address(0)\");\n        require(_proxyType != bytes32(0), \"ChugSplashManager: proxy must have a proxy type\");\n\n        proxies[_name] = _proxy;\n        proxyTypes[_name] = _proxyType;\n\n        emit ProxySetToTarget(_name, _proxy, _proxyType, _name);\n    }\n\n    /**\n     * @notice Allows the project owner to change the bond amount that an executor must pay to claim\n     *         a bundle. Can only be called when there is no active bundle.\n     *\n     * @param _executorBondAmount The new executor bond amount.\n     */\n    function setExecutorBondAmount(uint256 _executorBondAmount) external onlyOwner {\n        require(activeBundleId == bytes32(0), \"ChugSplashManager: bundle is currently active\");\n        executorBondAmount = _executorBondAmount;\n\n        emit ExecutorBondAmountSet(_executorBondAmount);\n        registry.announce(\"ExecutorBondAmountSet\");\n    }\n\n    /**\n     * @notice Transfers ownership of a proxy from this contract to an address selected by the\n     *         project owner.\n     *\n     * @param _name     String name of the target that corresponds to the proxy.\n     * @param _newOwner Address of the project owner that is receiving ownership of the proxy.\n     */\n    function transferProxyOwnership(string memory _name, address _newOwner) public onlyOwner {\n        // Get the proxy type that corresponds to this target.\n        bytes32 proxyType = proxyTypes[_name];\n        address payable proxy;\n        if (proxyType == bytes32(0)) {\n            // Use a default proxy if no proxy type has been set by the project owner.\n            proxy = getProxyByName(_name);\n        } else {\n            // We revert here since we currently do not support custom proxy types.\n            revert(\"ChugSplashManager: invalid proxy type, must be default proxy\");\n            // proxy = proxies[_name];\n        }\n\n        require(proxy.code.length != 0, \"ChugSplashManager: proxy is not deployed\");\n\n        // Get the adapter that corresponds to this proxy type.\n        address adapter = registry.adapters(proxyType);\n        require(adapter != address(0), \"ChugSplashManager: proxy type has no adapter\");\n\n        // Delegatecall the adapter to change ownership of the proxy.\n        (bool success, ) = adapter.delegatecall(\n            abi.encodeCall(IProxyAdapter.changeProxyAdmin, (proxy, _newOwner))\n        );\n        require(success, \"ChugSplashManager: delegatecall to change proxy admin failed\");\n\n        emit ProxyOwnershipTransferred(_name, proxy, proxyType, _newOwner, _name);\n    }\n\n    /**\n     * @notice Queries the selected executor for a given project/bundle.\n     *\n     * @param _bundleId ID of the bundle currently being executed.\n     *\n     * @return Address of the selected executor.\n     */\n    function getSelectedExecutor(bytes32 _bundleId) public view returns (address) {\n        ChugSplashBundleState storage bundle = bundles[_bundleId];\n        return bundle.selectedExecutor;\n    }\n\n    /**\n     * @notice Computes the address of an ERC-1967 proxy that would be created by this contract\n     *         given the target's name. This proxy is the default proxy used by ChugSplash. Uses\n     *         CREATE2 to guarantee that this address will be correct.\n     *\n     * @param _name Name of the target to get the corresponding proxy address of.\n     *\n     * @return Address of the proxy for the given name.\n     */\n    function getProxyByName(string memory _name) public view returns (address payable) {\n        return (\n            payable(\n                Create2.compute(\n                    address(this),\n                    keccak256(bytes(_name)),\n                    abi.encodePacked(type(Proxy).creationCode, abi.encode(address(this)))\n                )\n            )\n        );\n    }\n\n    /**\n     * @notice Allows the project owner to withdraw funds to any recipient address. Cannot be called\n     *         when there is an active bundle.\n     *\n     * @param _recipient Address to receive the funds.\n     * @param _amount    Amount to withdraw.\n     */\n    function withdrawETH(address payable _recipient, uint256 _amount) external onlyOwner {\n        require(\n            activeBundleId != bytes32(0),\n            \"ChugSplashManager: cannot withdraw funds while bundle is active\"\n        );\n        (bool success, ) = _recipient.call{ value: _amount }(new bytes(0));\n        require(success, \"ChugSplashManager: call to withdraw funds failed\");\n\n        emit ETHWithdrawn(msg.sender, _recipient, _amount);\n    }\n\n    /**\n     * @notice Allows anyone to send ETH to this contract.\n     */\n    function depositETH() external payable {\n        emit ETHDeposited(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Allows anyone to send ETH to this contract without calling a function.\n     */\n    receive() external payable {\n        emit ETHDeposited(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Refunds `executorBondAmount` to the executor if they complete the bundle within\n     *        `executionLockTime`, or if the project owner cancels the bundle.\n     *\n     * @param _bundleId ID of the bundle that was completed or cancelled by the project owner.\n     */\n    function _returnExecutorBond(bytes32 _bundleId) internal {\n        ChugSplashBundleState memory bundle = bundles[_bundleId];\n        require(\n            bundle.status == ChugSplashBundleStatus.COMPLETED ||\n                bundle.status == ChugSplashBundleStatus.CANCELLED,\n            \"ChugSplashManager: bundle is not completed or cancelled\"\n        );\n        require(\n            bundle.selectedExecutor != address(0),\n            \"ChugSplashManager: bundle has not been claimed\"\n        );\n        require(\n            !bundle.executorBondReturned,\n            \"ChugSplashManager: bond already returned to executor\"\n        );\n\n        bundle.executorBondReturned = true;\n\n        (bool success, ) = payable(bundle.selectedExecutor).call{ value: executorBondAmount }(\n            new bytes(0)\n        );\n        require(success, \"ChugSplashManager: call to executor failed\");\n\n        emit ExecutorBondReturned(_bundleId, bundle.selectedExecutor);\n        registry.announce(\"ExecutorBondReturned\");\n    }\n\n    /**\n     * @notice Sets new code for the proxy contract's implementation. Note that this scheme is a bit\n     *         different from the standard proxy scheme where one would typically deploy the code\n     *         separately and then set the implementation address. We're doing it this way because\n     *         it gives us a lot more freedom on the client side.\n     *\n     * @param _proxy     Address of the proxy to upgrade.\n     * @param _proxyType The proxy's type. This is the zero-address for default proxies.\n     * @param _code      Creation bytecode to be deployed.\n     */\n    function _setProxyCode(\n        address payable _proxy,\n        bytes32 _proxyType,\n        bytes memory _code\n    ) internal {\n        // TODO: Add a re-entrancy guard to this function if we move away from using\n        // `DEPLOY_CODE_PREFIX`. There is currently no risk of re-entrancy because the prefix\n        // guarantees that no sub-calls can be made in the implementation contract's constructor. In\n        // the future, we might want to move away from the prefix to add support for constructors\n        // that can run arbitrary creation bytecode. It will then become become necessary to add a\n        // re-entrancy guard to prevent a constructor from calling another contract which in turn\n        // calls back into setCode or setStorage.\n\n        // Get the adapter that corresponds to this proxy type.\n        address adapter = registry.adapters(_proxyType);\n        require(adapter != address(0), \"ChugSplashManager: proxy type has no adapter\");\n\n        // Get the address of the current implementation for the proxy.\n        address implementation = _getProxyImplementation(_proxy, adapter);\n\n        // If the code hash matches the code hash of the new implementation then we return early.\n        if (keccak256(_code) == _getAccountCodeHash(implementation)) {\n            return;\n        }\n\n        // Create the deploycode by prepending the magic prefix.\n        bytes memory deploycode = abi.encodePacked(DEPLOY_CODE_PREFIX, _code);\n\n        // Deploy the code and set the new implementation address.\n        address newImplementation;\n        assembly {\n            newImplementation := create(0x0, add(deploycode, 0x20), mload(deploycode))\n        }\n\n        // Check that the code was actually deployed correctly. It might be impossible to fail this\n        // check. Should only happen if the contract creation from above runs out of gas but this\n        // parent execution thread does NOT run out of gas. Seems like we should be doing this check\n        // anyway though.\n        require(\n            _getAccountCodeHash(newImplementation) == keccak256(_code),\n            \"ProxyUpdater: code was not correctly deployed\"\n        );\n\n        // Delegatecall the adapter to upgrade the proxy's implementation contract.\n        _upgradeProxyTo(_proxy, adapter, implementation);\n    }\n\n    /**\n     * @notice Modifies a storage slot within the proxy contract.\n     *\n     * @param _proxy     Address of the proxy to upgrade.\n     * @param _proxyType The proxy's type. This is the zero-address for default proxies.\n     * @param _key       Storage key to modify.\n     * @param _value     New value for the storage key.\n     */\n    function _setProxyStorage(\n        address payable _proxy,\n        bytes32 _proxyType,\n        bytes32 _key,\n        bytes32 _value\n    ) internal {\n        // Get the adapter that corresponds to this proxy type.\n        address adapter = registry.adapters(_proxyType);\n        require(adapter != address(0), \"ChugSplashManager: proxy type has no adapter\");\n\n        // Get the address of the current implementation for the proxy. The ChugSplashManager will\n        // set the proxy's implementation back to this address after setting it to be the\n        // ProxyUpdater and calling `setStorage`.\n        address implementation = _getProxyImplementation(_proxy, adapter);\n\n        // Delegatecall the adapter to upgrade the proxy's implementation to be the ProxyUpdater,\n        // which has the `setStorage` function.\n        _upgradeProxyTo(_proxy, adapter, proxyUpdater);\n\n        // Call the `setStorage` action on the proxy.\n        (bool success, ) = _proxy.call(abi.encodeCall(ProxyUpdater.setStorage, (_key, _value)));\n        require(success, \"ChugSplashManager: call to set proxy storage failed\");\n\n        // Delegatecall the adapter to set the proxy's implementation back to its original address.\n        _upgradeProxyTo(_proxy, adapter, implementation);\n    }\n\n    /**\n     * @notice Delegatecalls an adapter to get the address of the proxy's implementation contract.\n     *\n     * @param _proxy   Address of the proxy.\n     * @param _adapter Address of the adapter to use for the proxy.\n     */\n    function _getProxyImplementation(address payable _proxy, address _adapter)\n        internal\n        returns (address)\n    {\n        (bool success, bytes memory implementationBytes) = _adapter.delegatecall(\n            abi.encodeCall(IProxyAdapter.getProxyImplementation, (_proxy))\n        );\n        require(success, \"ChugSplashManager: delegatecall to get proxy implementation failed\");\n\n        // Convert the implementation's type from bytes to address.\n        address implementation;\n        assembly {\n            implementation := mload(add(implementationBytes, 32))\n        }\n        return implementation;\n    }\n\n    /**\n     * @notice Delegatecalls an adapter to upgrade a proxy's implementation contract.\n     *\n     * @param _proxy          Address of the proxy to upgrade.\n     * @param _adapter        Address of the adapter to use for the proxy.\n     * @param _implementation Address to set as the proxy's new implementation contract.\n     */\n    function _upgradeProxyTo(\n        address payable _proxy,\n        address _adapter,\n        address _implementation\n    ) internal {\n        (bool success, ) = _adapter.delegatecall(\n            abi.encodeCall(IProxyAdapter.upgradeProxyTo, (_proxy, _implementation))\n        );\n        require(success, \"ChugSplashManager: delegatecall to upgrade proxy failed\");\n    }\n\n    /**\n     * @notice Gets the code hash for a given account.\n     *\n     * @param _account Address of the account to get a code hash for.\n     *\n     * @return Code hash for the account.\n     */\n    function _getAccountCodeHash(address _account) internal view returns (bytes32) {\n        bytes32 codeHash;\n        assembly {\n            codeHash := extcodehash(_account)\n        }\n        return codeHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@eth-optimism/contracts-bedrock/contracts/universal/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title Proxy\n * @notice Proxy is a transparent proxy that passes through the call if the caller is the owner or\n *         if the caller is address(0), meaning that the call originated from an off-chain\n *         simulation.\n */\ncontract Proxy {\n    /**\n     * @notice The storage slot that holds the address of the implementation.\n     *         bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\n     */\n    bytes32 internal constant IMPLEMENTATION_KEY =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @notice The storage slot that holds the address of the owner.\n     *         bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\n     */\n    bytes32 internal constant OWNER_KEY =\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @notice An event that is emitted each time the implementation is changed. This event is part\n     *         of the EIP-1967 specification.\n     *\n     * @param implementation The address of the implementation contract\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @notice An event that is emitted each time the owner is upgraded. This event is part of the\n     *         EIP-1967 specification.\n     *\n     * @param previousAdmin The previous owner of the contract\n     * @param newAdmin      The new owner of the contract\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @notice A modifier that reverts if not called by the owner or by address(0) to allow\n     *         eth_call to interact with this proxy without needing to use low-level storage\n     *         inspection. We assume that nobody is able to trigger calls from address(0) during\n     *         normal EVM execution.\n     */\n    modifier proxyCallIfNotAdmin() {\n        if (msg.sender == _getAdmin() || msg.sender == address(0)) {\n            _;\n        } else {\n            // This WILL halt the call frame on completion.\n            _doProxyCall();\n        }\n    }\n\n    /**\n     * @notice Sets the initial admin during contract deployment. Admin address is stored at the\n     *         EIP-1967 admin storage slot so that accidental storage collision with the\n     *         implementation is not possible.\n     *\n     * @param _admin Address of the initial contract admin. Admin as the ability to access the\n     *               transparent proxy interface.\n     */\n    constructor(address _admin) {\n        _changeAdmin(_admin);\n    }\n\n    // slither-disable-next-line locked-ether\n    receive() external payable {\n        // Proxy call by default.\n        _doProxyCall();\n    }\n\n    // slither-disable-next-line locked-ether\n    fallback() external payable {\n        // Proxy call by default.\n        _doProxyCall();\n    }\n\n    /**\n     * @notice Set the implementation contract address. The code at the given address will execute\n     *         when this contract is called.\n     *\n     * @param _implementation Address of the implementation contract.\n     */\n    function upgradeTo(address _implementation) external proxyCallIfNotAdmin {\n        _setImplementation(_implementation);\n    }\n\n    /**\n     * @notice Set the implementation and call a function in a single transaction. Useful to ensure\n     *         atomic execution of initialization-based upgrades.\n     *\n     * @param _implementation Address of the implementation contract.\n     * @param _data           Calldata to delegatecall the new implementation with.\n     */\n    function upgradeToAndCall(address _implementation, bytes calldata _data)\n        external\n        payable\n        proxyCallIfNotAdmin\n        returns (bytes memory)\n    {\n        _setImplementation(_implementation);\n        (bool success, bytes memory returndata) = _implementation.delegatecall(_data);\n        require(success, \"Proxy: delegatecall to new implementation contract failed\");\n        return returndata;\n    }\n\n    /**\n     * @notice Changes the owner of the proxy contract. Only callable by the owner.\n     *\n     * @param _admin New owner of the proxy contract.\n     */\n    function changeAdmin(address _admin) external proxyCallIfNotAdmin {\n        _changeAdmin(_admin);\n    }\n\n    /**\n     * @notice Gets the owner of the proxy contract.\n     *\n     * @return Owner address.\n     */\n    function admin() external proxyCallIfNotAdmin returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @notice Queries the implementation address.\n     *\n     * @return Implementation address.\n     */\n    function implementation() external proxyCallIfNotAdmin returns (address) {\n        return _getImplementation();\n    }\n\n    /**\n     * @notice Sets the implementation address.\n     *\n     * @param _implementation New implementation address.\n     */\n    function _setImplementation(address _implementation) internal {\n        assembly {\n            sstore(IMPLEMENTATION_KEY, _implementation)\n        }\n        emit Upgraded(_implementation);\n    }\n\n    /**\n     * @notice Changes the owner of the proxy contract.\n     *\n     * @param _admin New owner of the proxy contract.\n     */\n    function _changeAdmin(address _admin) internal {\n        address previous = _getAdmin();\n        assembly {\n            sstore(OWNER_KEY, _admin)\n        }\n        emit AdminChanged(previous, _admin);\n    }\n\n    /**\n     * @notice Performs the proxy call via a delegatecall.\n     */\n    function _doProxyCall() internal {\n        address impl = _getImplementation();\n        require(impl != address(0), \"Proxy: implementation not initialized\");\n\n        assembly {\n            // Copy calldata into memory at 0x0....calldatasize.\n            calldatacopy(0x0, 0x0, calldatasize())\n\n            // Perform the delegatecall, make sure to pass all available gas.\n            let success := delegatecall(gas(), impl, 0x0, calldatasize(), 0x0, 0x0)\n\n            // Copy returndata into memory at 0x0....returndatasize. Note that this *will*\n            // overwrite the calldata that we just copied into memory but that doesn't really\n            // matter because we'll be returning in a second anyway.\n            returndatacopy(0x0, 0x0, returndatasize())\n\n            // Success == 0 means a revert. We'll revert too and pass the data up.\n            if iszero(success) {\n                revert(0x0, returndatasize())\n            }\n\n            // Otherwise we'll just return and pass the data up.\n            return(0x0, returndatasize())\n        }\n    }\n\n    /**\n     * @notice Queries the implementation address.\n     *\n     * @return Implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        address impl;\n        assembly {\n            impl := sload(IMPLEMENTATION_KEY)\n        }\n        return impl;\n    }\n\n    /**\n     * @notice Queries the owner of the proxy contract.\n     *\n     * @return Owner address.\n     */\n    function _getAdmin() internal view returns (address) {\n        address owner;\n        assembly {\n            owner := sload(OWNER_KEY)\n        }\n        return owner;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/ProxyUpdater.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @title ProxyUpdater\n * @notice The ProxyUpdater contains the logic that sets storage slots within the proxy contract\n *         when an action is executed in the ChugSplashManager. When a `setStorage` action is\n *         executed, the ChugSplashManager temporarily sets the proxy's implementation to be this\n *         contract so that the proxy can delegatecall into it.\n */\ncontract ProxyUpdater {\n    /**\n     * @notice Modifies some storage slot within the proxy contract. Gives us a lot of power to\n     *         perform upgrades in a more transparent way.\n     *\n     * @param _key   Storage key to modify.\n     * @param _value New value for the storage key.\n     */\n    function setStorage(bytes32 _key, bytes32 _value) external {\n        assembly {\n            sstore(_key, _value)\n        }\n    }\n}\n"
    },
    "contracts/libraries/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @title Create2\n * @notice Simple library for computing CREATE2 addresses.\n */\nlibrary Create2 {\n    /**\n     * @notice Computes the CREATE2 address for the given parameters.\n     *\n     * @param _creator  Address executing the CREATE2 instruction.\n     * @param _salt     32 byte salt passed to the CREATE2 instruction.\n     * @param _bytecode Initcode for the contract creation.\n     *\n     * @return Predicted address of the created contract.\n     */\n    function compute(\n        address _creator,\n        bytes32 _salt,\n        bytes memory _bytecode\n    ) internal pure returns (address) {\n        return\n            address(\n                uint160(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(bytes1(0xff), _creator, _salt, keccak256(_bytecode))\n                        )\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/libraries/MerkleTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @custom:attribution https://github.com/ethereum-optimism/optimism\n * @title MerkleTree\n * @notice Simple Merkle tree implementation, supports up to 2^16 leaves.\n */\nlibrary MerkleTree {\n    /**\n     * @notice Calculates a merkle root for a list of 32-byte leaf hashes.\n     *         NOTE: If the number of leaves passed in is not a power of two, it pads out the\n     *         tree with zero hashes. If you do not know the original length of elements for the\n     *         tree you are verifying, then this may allow empty leaves past _elements.length to\n     *         pass a verification check down the line.\n     *         NOTE: The _elements argument is modified, therefore it must not be used again.\n     *\n     * @param _elements Array of hashes from which to generate a merkle root.\n     *\n     * @return Merkle root of the leaves, with zero hashes for non-powers-of-two (see above).\n     */\n    function getMerkleRoot(bytes32[] memory _elements) internal pure returns (bytes32) {\n        require(_elements.length > 0, \"MerkleTree: must provide at least one leaf hash\");\n\n        if (_elements.length == 1) {\n            return _elements[0];\n        }\n\n        uint256[16] memory defaults = [\n            0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563,\n            0x633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d,\n            0x890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d,\n            0x3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8,\n            0xecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da,\n            0xdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5,\n            0x617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7,\n            0x292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead,\n            0xe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e10,\n            0x7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82,\n            0xe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e83636516,\n            0x3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c,\n            0xad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e,\n            0xa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab,\n            0x4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c862,\n            0x2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10\n        ];\n\n        // Reserve memory space for our hashes.\n        bytes memory buf = new bytes(64);\n\n        // We'll need to keep track of left and right siblings.\n        bytes32 leftSibling;\n        bytes32 rightSibling;\n\n        // Number of non-empty nodes at the current depth.\n        uint256 rowSize = _elements.length;\n\n        // Current depth, counting from 0 at the leaves\n        uint256 depth = 0;\n\n        // Common sub-expressions\n        uint256 halfRowSize; // rowSize / 2\n        bool rowSizeIsOdd; // rowSize % 2 == 1\n\n        while (rowSize > 1) {\n            halfRowSize = rowSize / 2;\n            rowSizeIsOdd = rowSize % 2 == 1;\n\n            for (uint256 i = 0; i < halfRowSize; i++) {\n                leftSibling = _elements[(2 * i)];\n                rightSibling = _elements[(2 * i) + 1];\n                assembly {\n                    mstore(add(buf, 32), leftSibling)\n                    mstore(add(buf, 64), rightSibling)\n                }\n\n                _elements[i] = keccak256(buf);\n            }\n\n            if (rowSizeIsOdd) {\n                leftSibling = _elements[rowSize - 1];\n                rightSibling = bytes32(defaults[depth]);\n                assembly {\n                    mstore(add(buf, 32), leftSibling)\n                    mstore(add(buf, 64), rightSibling)\n                }\n\n                _elements[halfRowSize] = keccak256(buf);\n            }\n\n            rowSize = halfRowSize + (rowSizeIsOdd ? 1 : 0);\n            depth++;\n        }\n\n        return _elements[0];\n    }\n\n    /**\n     * @notice Verifies a merkle branch for the given leaf hash. Assumes the original length of\n     *         leaves generated is a known, correct input, and does not return true for indices\n     *         extending past that index (even if _siblings would be otherwise valid).\n     *\n     * @param _root        The Merkle root to verify against.\n     * @param _leaf        The leaf hash to verify inclusion of.\n     * @param _index       The index in the tree of this leaf.\n     * @param _siblings    Array of sibline nodes in the inclusion proof, starting from depth 0.\n     * @param _totalLeaves The total number of leaves originally passed into.\n     *\n     * @return Whether or not the merkle branch and leaf passes verification.\n     */\n    function verify(\n        bytes32 _root,\n        bytes32 _leaf,\n        uint256 _index,\n        bytes32[] memory _siblings,\n        uint256 _totalLeaves\n    ) internal pure returns (bool) {\n        require(_totalLeaves > 0, \"MerkleTree: total leaves must be greater than zero\");\n        require(_index < _totalLeaves, \"MerkleTree: index out of bounds\");\n        require(\n            _siblings.length == _ceilLog2(_totalLeaves),\n            \"MerkleTree: total siblings does not correctly correspond to total leaves\"\n        );\n\n        bytes32 computedRoot = _leaf;\n        for (uint256 i = 0; i < _siblings.length; i++) {\n            if ((_index & 1) == 1) {\n                computedRoot = keccak256(abi.encodePacked(_siblings[i], computedRoot));\n            } else {\n                computedRoot = keccak256(abi.encodePacked(computedRoot, _siblings[i]));\n            }\n\n            _index >>= 1;\n        }\n\n        return _root == computedRoot;\n    }\n\n    /**\n     * @notice Calculates the integer ceiling of the log base 2 of an input.\n     *\n     * @param _in Unsigned input to calculate the log.\n     *\n     * @return ceil(log_base_2(_in))\n     */\n    function _ceilLog2(uint256 _in) private pure returns (uint256) {\n        require(_in > 0, \"Lib_MerkleTree: Cannot compute ceil(log_2) of 0.\");\n\n        if (_in == 1) {\n            return 0;\n        }\n\n        // Find the highest set bit (will be floor(log_2)).\n        // Borrowed with <3 from https://github.com/ethereum/solidity-examples\n        uint256 val = _in;\n        uint256 highest = 0;\n        for (uint256 i = 128; i >= 1; i >>= 1) {\n            if (val & (((uint256(1) << i) - 1) << i) != 0) {\n                highest += i;\n                val >>= i;\n            }\n        }\n\n        // Increment by one if this is not a perfect logarithm.\n        if ((uint256(1) << highest) != _in) {\n            highest += 1;\n        }\n\n        return highest;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/ChugSplashBootLoader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ChugSplashRegistry } from \"./ChugSplashRegistry.sol\";\nimport { ChugSplashManager } from \"./ChugSplashManager.sol\";\nimport { ChugSplashManagerProxy } from \"./ChugSplashManagerProxy.sol\";\nimport { ProxyUpdater } from \"./ProxyUpdater.sol\";\nimport { Create2 } from \"./libraries/Create2.sol\";\nimport { Proxy } from \"@eth-optimism/contracts-bedrock/contracts/universal/Proxy.sol\";\n\n/**\n * @title ChugSplashBootLoader\n */\ncontract ChugSplashBootLoader {\n    /**\n     * @notice Address of the ProxyUpdater.\n     */\n    ProxyUpdater public proxyUpdater;\n\n    /**\n     * @notice Address of the ChugSplashRegistry implementation contract.\n     */\n    ChugSplashRegistry public registryImplementation;\n\n    /**\n     * @notice Address of the ChugSplashRegistry's proxy.\n     */\n    Proxy public registryProxy;\n\n    /**\n     * @notice Address of the ChugSplashManager implementation contract. All ChugSplashManagerProxy\n     *         contracts, including the root contract, will have this address as their\n     *         implementation.\n     */\n    ChugSplashManager public managerImplementation;\n\n    /**\n     * @notice Address of the root ChugSplashManagerProxy.\n     */\n    ChugSplashManagerProxy public rootManagerProxy;\n\n    /**\n     * @notice Boots an upgradeable version of ChugSplash with a root ChugSplashManager that owns\n     *         the ChugSplashRegistry. Once these contracts are deployed, we can upgrade ChugSplash\n     *         using ChugSplash!\n     *\n     * @param _owner              Address of the owner of the ChugSplash contracts.\n     * @param _executorBondAmount Executor bond amount in ETH.\n     * @param _executionLockTime  Amount of time for an executor to completely execute a bundle\n     *                            after claiming it.\n     * @param _ownerBondAmount    Amount that must be deposited in this contract in order to execute\n     *                            a bundle.\n     */\n    constructor(address _owner, uint256 _executorBondAmount, uint256 _executionLockTime, uint256 _ownerBondAmount) {\n        // Deploy the ProxyUpdater.\n        proxyUpdater = new ProxyUpdater{ salt: bytes32(0) }();\n\n        // Get the address of the ChugSplashRegistry's proxy that *will* be deployed.\n        address registryProxyAddress = Create2.compute(\n            address(this),\n            bytes32(0),\n            abi.encodePacked(type(Proxy).creationCode, abi.encode(address(this)))\n        );\n\n        // Deploy and initialize the ChugSplashManager implementation contract.\n        managerImplementation = new ChugSplashManager{ salt: bytes32(0) }(\n            ChugSplashRegistry(registryProxyAddress),\n            \"Root Manager\",\n            _owner,\n            address(proxyUpdater),\n            _executorBondAmount,\n            _executionLockTime,\n            _ownerBondAmount\n        );\n\n        // Deploy and initialize the root ChugSplashManager's proxy.\n        rootManagerProxy = new ChugSplashManagerProxy{ salt: bytes32(0) }(\n            ChugSplashRegistry(registryProxyAddress),\n            address(managerImplementation),\n            _owner,\n            abi.encodeCall(ChugSplashManager.initialize, (\"Root Manager\", _owner, _executorBondAmount))\n        );\n\n        // Deploy and initialize the ChugSplashRegistry's implementation contract.\n        registryImplementation = new ChugSplashRegistry{ salt: bytes32(0) }(\n            address(proxyUpdater),\n            _ownerBondAmount,\n            address(managerImplementation)\n        );\n\n        // Deploy the ChugSplashRegistry's proxy.\n        registryProxy = new Proxy{ salt: bytes32(0) }(\n            // The owner must initially be this contract so that we can set the proxy's\n            // implementation contract.\n            address(this)\n        );\n\n        // Set the proxy's implementation contract.\n        registryProxy.upgradeTo(\n            address(registryImplementation)\n        );\n\n        // Transfer ownership of the ChugSplashRegistry's proxy to the root ChugSplashManagerProxy.\n        registryProxy.changeAdmin(address(rootManagerProxy));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}